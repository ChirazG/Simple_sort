PROCEDURE swap(VAR xp, VAR yp : INTEGER)
VAR
   tmp : INTEGER;
BEGIN
  tmp := xp;
  xp := yp;
  yp := tmp;
END
/* *** selection sort *** */
PROCEDURE selection_sort(VAR tab : ARRAY_OF INTEGER)
VAR
   i,j,min_idx,n : INTEGER;
BEGIN
   n := tab.length;
   // one by one move boundary of sub-array
   FOR i FROM 0 TO n-2 STEP 1  DO
       min_idx := i;
       FOR j  FROM i  TO n-i-2 STEP 1  DO
           IF (tab[j]<tab[min_idx]) THEN
               min_idx := j;
           END_IF
       END_FOR
   // swap the found minimum element with the first element
   swap(arr[min_idx],arr[i]);
   END_FOR
END

ALGORITHM card
VAR
    card, n, nc, p, i, j, k: INTEGER;
    arr: ARRAY_OF INTEGER[n]
BEGIN
   n:= arr.length;
   
   FOR i FROM 0 TO n-1 DO
     REPEAT
         Write ("enter the numbers of the card in your hand arr["i"]");
         Read(arr[i]);// insert from user
     UNTIL (arr[i]>0)   
   END_FOR

   selection_sort(arr);
   REPEAT
     Write ("enter the number of the cards you will insert");
     Read (nc);
   UNTIL (nc>0)

   FOR k FROM 0 TO nc STEP 1 DO
        REPEAT
         Write("give the card to insert");
         Read(card);
       UNTIL (card>0)

       FOR i FROM 0 TO n-1 DO
            IF (card> arr[i]) THEN
             p:= i;
              For j FROM n-1 TO p DO
                 arr[j+1] := arr[j];
              END_FOR
           END_IF
           arr[p] := card;
           break;
       END_FOR
   END_FOR 
   Write(arr);
END